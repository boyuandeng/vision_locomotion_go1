package lcmcomm;

struct BmsCmd
{
	byte off;
	byte reserve[3];
}
struct BmsState
{
    byte version_h;
    byte version_l;
    byte bms_status;                // 0x00 : wakeup, 0X01 :  discharge, 0x02 : charge, 0x03 : charger, 0x04 : precharge, 0x05 : charge_err, 0x06 : waterfall_light, 0x07 : self_discharge, 0x08 : junk.
    byte SOC;                       // SOC 0-100%
    int32_t current;                   // （unit: mA)
    int16_t cycle;                    // The current number of cycles of the battery
    int8_t BQ_NTC[2];      // x1 degrees centigrade
    int8_t MCU_NTC[2];     // x1 degrees centigrade
    int16_t cell_vol[10]; // cell voltage mV
}


struct Cartesian
{
	float x;
	float y;
	float z;
} 

struct IMU 
{
	float quaternion[4];               // quaternion, normalized, (w,x,y,z)
	float gyroscope[3];                // angular velocity （unit: rad/s)
	float accelerometer[3];            // m/(s2)
	float rpy[3];                      // euler angle（unit: rad)
	int8_t temperature;
}                                 // when under accelerated motion, the attitude of the robot calculated by IMU will drift.

struct LED 
{
	byte r;
	byte g;
	byte b;
}                                 // foot led brightness: 0~255

struct MotorState
{
	byte mode;                      // motor working mode 
	float q;                           // current angle (unit: radian)
	float dq;                          // current velocity (unit: radian/second)
	float ddq;                         // current acc (unit: radian/second*second)
	float tauEst;                      // current estimated output torque (unit: N.m)
	float q_raw;                       // current angle (unit: radian)
	float dq_raw;                      // current velocity (unit: radian/second)
	float ddq_raw;
	int8_t temperature;                // current temperature (temperature conduction is slow that leads to lag)
	int32_t reserve[2];
}                           // motor feedback

struct MotorCmd
{

		byte mode;                      // desired working mode
		float q;                           // desired angle (unit: radian) 
		float dq;                          // desired velocity (unit: radian/second)
		float tau;                         // desired output torque (unit: N.m)
		float Kp;                          // desired position stiffness (unit: N.m/rad )
		float Kd;                          // desired velocity stiffness (unit: N.m/(rad/s) )
		int32_t reserve[3];


}                             // motor control

struct LowState
{
	byte head[2];
	byte levelFlag;                 // flag to distinguish high level or low level
	byte frameReserve;

	int32_t SN[2]; 
	int32_t version[2];
	int16_t bandWidth;

	IMU imu;
	MotorState motorState[20];
	int16_t footForce[4];              // force sensors
	int16_t footForceEst[4];           // force sensors
	int32_t tick;                     // reference real-time from motion controller (unit: us)
	byte wirelessRemote[40];        // wireless commands
	int32_t reserve;
	int32_t crc;
}                             // low level feedback

struct LowCmd 
{
		byte head[2];
		byte levelFlag;
		byte frameReserve;
		int32_t SN[2];
		int32_t version[2];
		int16_t bandWidth;
		MotorCmd motorCmd[20];
		BmsCmd bms;
		byte wirelessRemote[40];
		int32_t reserve;
		int32_t crc;
}                               // low level control

struct HighState
{
	byte head[2];
	byte levelFlag;
	byte frameReserve;
	int32_t SN[2];
	int32_t version[2];
	int16_t bandWidth;
	IMU imu;
	MotorState motorState[20];
	BmsState bms;
	int16_t footForce[4];
	int16_t footForceEst;
	byte mode;
	float progress;
	byte gaitType;
	float footRaiseHeight;
	float position[3];
	float bodyHeight;
	float velocity[3];
	float yawSpeed;
    float rangeObstacle[4];         // Distance to nearest obstacle
    Cartesian footPosition2Body[4]; // foot position relative to body
    Cartesian footSpeed2Body[4];    // foot speed relative to body
	byte wirelessRemote[40];
	int32_t reserve;
	int32_t crc;
}                            // high level feedback

struct HighCmd
{
	byte head[2];
	byte levelFlag;
	byte frameReserve;
	int32_t version[2];
	int32_t SN[2];
	int16_t bandWidth;
	byte mode;                      // 0:idle, default stand  \    1:forced stand     2:walk continuously
	byte gaitType;
	byte speedLevel;
	float bodyHeight;                  // body height, scale: -1~1
	float footRaiseHeight;             // foot up height while walking (unavailable now)
	float position[3];
	float euler[3];
	float velocity[2];
	float yawSpeed;
	BmsCmd bms;
	LED led[4];
	byte wirelessRemote[40];
	int32_t reserve;
	int32_t crc;
}                              // high level control

